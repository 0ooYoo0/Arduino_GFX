/*
 * start rewrite from:
 * https://github.com/modi12jin/Arduino-ESP32-WEA2012.git
 */
#pragma once

#include "../Arduino_GFX.h"
#include "../Arduino_TFT.h"

#define WEA2012_TFTWIDTH 356  ///< WEA2012 max TFT width
#define WEA2012_TFTHEIGHT 400 ///< WEA2012 max TFT height

#define WEA2012_RST_DELAY 100    ///< delay ms wait for reset finish
#define WEA2012_SLPIN_DELAY 100  ///< delay ms wait for sleep in finish
#define WEA2012_SLPOUT_DELAY 100 ///< delay ms wait for sleep out finish

#define WEA2012_SWRESET 0x01 ///< Software reset register

#define WEA2012_SLPIN 0x10  ///< Enter Sleep Mode
#define WEA2012_SLPOUT 0x11 ///< Sleep Out

#define WEA2012_INVOFF 0x20 ///< Display Inversion OFF
#define WEA2012_INVON 0x21  ///< Display Inversion ON

#define WEA2012_DISPOFF 0x28 ///< Display OFF
#define WEA2012_DISPON 0x29  ///< Display ON

#define WEA2012_CASET 0x2A ///< Column Address Set
#define WEA2012_PASET 0x2B ///< Page Address Set
#define WEA2012_RAMWR 0x2C ///< Memory Write
#define WEA2012_RAMRD 0x2E ///< Memory Read

#define WEA2012_MADCTL 0x36
#define WEA2012_PIXFMT 0x3A // Interface Pixel Format

#define WEA2012_MADCTL_MY 0x80
#define WEA2012_MADCTL_MX 0x40
#define WEA2012_MADCTL_MV 0x20
#define WEA2012_MADCTL_ML 0x10
#define WEA2012_MADCTL_RGB 0x00
#define WEA2012_MADCTL_MH 0x04
#define WEA2012_MADCTL_BGR 0x08

static const uint8_t wea2012_init_operations[] = {
    BEGIN_WRITE,
    //==============================
    //=Start of SPD2010 Initial Code
    //==============================
    WRITE_C8_BYTES, 0xFF, 3, 0x20, 0x10, 0x10,
    WRITE_C8_D8, 0x0C, 0x11,
    WRITE_C8_D8, 0x10, 0x02,
    WRITE_C8_D8, 0x11, 0x11,
    WRITE_C8_D8, 0x15, 0x42,
    WRITE_C8_D8, 0x16, 0x11,
    WRITE_C8_D8, 0x1A, 0x02,
    WRITE_C8_D8, 0x1B, 0x11,
    WRITE_C8_D8, 0x61, 0x80,
    WRITE_C8_D8, 0x62, 0x80,
    WRITE_C8_D8, 0x54, 0x44,
    WRITE_C8_D8, 0x58, 0x88,
    WRITE_C8_D8, 0x5C, 0xcc,

    WRITE_C8_BYTES, 0xFF, 3, 0x20, 0x10, 0x10,
    WRITE_C8_D8, 0x20, 0x80,
    WRITE_C8_D8, 0x21, 0x81,
    WRITE_C8_D8, 0x22, 0x31,
    WRITE_C8_D8, 0x23, 0x20,
    WRITE_C8_D8, 0x24, 0x11,
    WRITE_C8_D8, 0x25, 0x11,
    WRITE_C8_D8, 0x26, 0x12,
    WRITE_C8_D8, 0x27, 0x12,
    WRITE_C8_D8, 0x30, 0x80,
    WRITE_C8_D8, 0x31, 0x81,
    WRITE_C8_D8, 0x32, 0x31,
    WRITE_C8_D8, 0x33, 0x20,
    WRITE_C8_D8, 0x34, 0x11,
    WRITE_C8_D8, 0x35, 0x11,
    WRITE_C8_D8, 0x36, 0x12,
    WRITE_C8_D8, 0x37, 0x12,

    WRITE_C8_BYTES, 0xFF, 3, 0x20, 0x10, 0x10,
    WRITE_C8_D8, 0x41, 0x11,
    WRITE_C8_D8, 0x42, 0x22,
    WRITE_C8_D8, 0x43, 0x33,
    WRITE_C8_D8, 0x49, 0x11,
    WRITE_C8_D8, 0x4A, 0x22,
    WRITE_C8_D8, 0x4B, 0x33,

    WRITE_C8_BYTES, 0xFF, 3, 0x20, 0x10, 0x15,
    WRITE_C8_D8, 0x00, 0x00,
    WRITE_C8_D8, 0x01, 0x00,
    WRITE_C8_D8, 0x02, 0x00,
    WRITE_C8_D8, 0x03, 0x00,

    WRITE_C8_D8, 0x04, 0x10,
    WRITE_C8_D8, 0x05, 0x0C,
    WRITE_C8_D8, 0x06, 0x23,
    WRITE_C8_D8, 0x07, 0x22,
    WRITE_C8_D8, 0x08, 0x21,
    WRITE_C8_D8, 0x09, 0x20,

    WRITE_C8_D8, 0x0A, 0x33,
    WRITE_C8_D8, 0x0B, 0x32,
    WRITE_C8_D8, 0x0C, 0x34,
    WRITE_C8_D8, 0x0D, 0x35,
    WRITE_C8_D8, 0x0E, 0x01,
    WRITE_C8_D8, 0x0F, 0x01,
    WRITE_C8_D8, 0x20, 0x00,
    WRITE_C8_D8, 0x21, 0x00,
    WRITE_C8_D8, 0x22, 0x00,
    WRITE_C8_D8, 0x23, 0x00,

    WRITE_C8_D8, 0x24, 0x0C,
    WRITE_C8_D8, 0x25, 0x10,
    WRITE_C8_D8, 0x26, 0x20,
    WRITE_C8_D8, 0x27, 0x21,
    WRITE_C8_D8, 0x28, 0x22,
    WRITE_C8_D8, 0x29, 0x23,

    WRITE_C8_D8, 0x2A, 0x33,
    WRITE_C8_D8, 0x2B, 0x32,
    WRITE_C8_D8, 0x2C, 0x34,
    WRITE_C8_D8, 0x2D, 0x35,
    WRITE_C8_D8, 0x2E, 0x01,
    WRITE_C8_D8, 0x2F, 0x01,

    WRITE_C8_BYTES, 0xFF, 3, 0x20, 0x10, 0x16,
    WRITE_C8_D8, 0x00, 0x00,
    WRITE_C8_D8, 0x01, 0x00,
    WRITE_C8_D8, 0x02, 0x00,
    WRITE_C8_D8, 0x03, 0x00,

    WRITE_C8_D8, 0x04, 0x08,
    WRITE_C8_D8, 0x05, 0x04,
    WRITE_C8_D8, 0x06, 0x19,
    WRITE_C8_D8, 0x07, 0x18,
    WRITE_C8_D8, 0x08, 0x17,
    WRITE_C8_D8, 0x09, 0x16,

    WRITE_C8_D8, 0x0A, 0x33,
    WRITE_C8_D8, 0x0B, 0x32,
    WRITE_C8_D8, 0x0C, 0x34,
    WRITE_C8_D8, 0x0D, 0x35,
    WRITE_C8_D8, 0x0E, 0x01,
    WRITE_C8_D8, 0x0F, 0x01,
    WRITE_C8_D8, 0x20, 0x00,
    WRITE_C8_D8, 0x21, 0x00,
    WRITE_C8_D8, 0x22, 0x00,
    WRITE_C8_D8, 0x23, 0x00,

    WRITE_C8_D8, 0x24, 0x04,
    WRITE_C8_D8, 0x25, 0x08,
    WRITE_C8_D8, 0x26, 0x16,
    WRITE_C8_D8, 0x27, 0x17,
    WRITE_C8_D8, 0x28, 0x18,
    WRITE_C8_D8, 0x29, 0x19,

    WRITE_C8_D8, 0x2A, 0x33,
    WRITE_C8_D8, 0x2B, 0x32,
    WRITE_C8_D8, 0x2C, 0x34,
    WRITE_C8_D8, 0x2D, 0x35,
    WRITE_C8_D8, 0x2E, 0x01,
    WRITE_C8_D8, 0x2F, 0x01,

    WRITE_C8_BYTES, 0xFF, 3, 0x20, 0x10, 0x12,
    WRITE_C8_D8, 0x00, 0x99,
    WRITE_C8_D8, 0x2A, 0x28,
    WRITE_C8_D8, 0x2B, 0x0f,
    WRITE_C8_D8, 0x2C, 0x16,
    WRITE_C8_D8, 0x2D, 0x28,
    WRITE_C8_D8, 0x2E, 0x0f,

    WRITE_C8_BYTES, 0xFF, 3, 0x20, 0x10, 0xA0,
    WRITE_C8_D8, 0x08, 0xdc,

    WRITE_C8_BYTES, 0xFF, 3, 0x20, 0x10, 0x45,
    WRITE_C8_D8, 0x03, 0x64,

    WRITE_C8_BYTES, 0xFF, 3, 0x20, 0x10, 0x42,
    WRITE_C8_D8, 0x05, 0x2c,

    WRITE_C8_BYTES, 0xFF, 3, 0x20, 0x10, 0x11,
    WRITE_C8_D8, 0x50, 0x01,

    WRITE_C8_BYTES, 0xFF, 3, 0x20, 0x10, 0x00,
    WRITE_C8_BYTES, 0x2A, 4, 0x00, 0x00, 0x01, 0x63,

    // Sot error
    WRITE_C8_BYTES, 0xFF, 3, 0x20, 0x10, 0x40,
    WRITE_C8_D8, 0x86, 0x00,
    WRITE_C8_BYTES, 0xFF, 3, 0x20, 0x10, 0x00,

    // LVD VCI=2.4V
    WRITE_C8_BYTES, 0xFF, 3, 0x20, 0x10, 0x12,
    WRITE_C8_D8, 0x0D, 0x66,

    // GPWR period
    WRITE_C8_BYTES, 0xFF, 3, 0x20, 0x10, 0x17,
    WRITE_C8_D8, 0x39, 0x3c,

    // Gamma 2.2
    // 0xff, {0x20,0x10,0x30}, 3},
    // 0x00, 0x15,
    // 0xff, {0x20,0x10,0x00}, 3},

    // Positive gamma
    WRITE_C8_BYTES, 0xff, 3, 0x20, 0x10, 0x31,

    // level 0
    WRITE_C8_D8, 0x38, 0x03,
    WRITE_C8_D8, 0x39, 0xf0,

    // level 1
    WRITE_C8_D8, 0x36, 0x03,
    WRITE_C8_D8, 0x37, 0xe8,

    // level 3
    WRITE_C8_D8, 0x34, 0x03,
    // 0x35, 0xda,
    WRITE_C8_D8, 0x35, 0xCF,

    // level 5
    WRITE_C8_D8, 0x32, 0x03,
    // 0x33, 0xcf,
    WRITE_C8_D8, 0x33, 0xBA,

    // level 7
    WRITE_C8_D8, 0x30, 0x03,
    // 0x31, 0xc8,
    WRITE_C8_D8, 0x31, 0xA2,

    // level 9
    WRITE_C8_D8, 0x2e, 0x03,
    // 0x2f, 0xba,
    WRITE_C8_D8, 0x2f, 0x8E,

    // level 11
    WRITE_C8_D8, 0x2c, 0x03,
    // 0x2d, 0xac,
    WRITE_C8_D8, 0x2d, 0x70,

    // level 13
    WRITE_C8_D8, 0x2a, 0x03,
    // 0x2b, 0xa0,
    WRITE_C8_D8, 0x2b, 0x52,

    // level 15
    WRITE_C8_D8, 0x28, 0x03,
    // 0x29, 0x70,
    WRITE_C8_D8, 0x29, 0x3E,

    // level 24
    WRITE_C8_D8, 0x26, 0x02,
    WRITE_C8_D8, 0x27, 0xfa,

    // level 32
    WRITE_C8_D8, 0x24, 0x02,
    WRITE_C8_D8, 0x25, 0xc2,

    // level 48
    WRITE_C8_D8, 0x22, 0x02,
    WRITE_C8_D8, 0x23, 0x80,

    // level 64
    WRITE_C8_D8, 0x20, 0x02,
    WRITE_C8_D8, 0x21, 0x53,

    // level 96
    WRITE_C8_D8, 0x1e, 0x02,
    WRITE_C8_D8, 0x1f, 0x0e,

    // level 128
    WRITE_C8_D8, 0x1c, 0x01,
    WRITE_C8_D8, 0x1d, 0xcf,

    // level 160
    WRITE_C8_D8, 0x1a, 0x01,
    WRITE_C8_D8, 0x1b, 0x7b,

    // level 192
    WRITE_C8_D8, 0x18, 0x01,
    WRITE_C8_D8, 0x19, 0x3d,

    // level 208
    WRITE_C8_D8, 0x16, 0x01,
    WRITE_C8_D8, 0x17, 0x0e,

    // level 224
    WRITE_C8_D8, 0x14, 0x00,
    WRITE_C8_D8, 0x15, 0xd0,

    // level 232
    WRITE_C8_D8, 0x12, 0x00,
    WRITE_C8_D8, 0x13, 0xa6,

    // level 240
    WRITE_C8_D8, 0x10, 0x00,
    WRITE_C8_D8, 0x11, 0x79,

    // level 242
    WRITE_C8_D8, 0x0e, 0x00,
    WRITE_C8_D8, 0x0f, 0x72,

    // level 244
    WRITE_C8_D8, 0x0c, 0x00,
    WRITE_C8_D8, 0x0d, 0x62,

    // level 246
    WRITE_C8_D8, 0x0a, 0x00,
    WRITE_C8_D8, 0x0b, 0x54,

    // level 248
    WRITE_C8_D8, 0x08, 0x00,
    WRITE_C8_D8, 0x09, 0x3d,

    // level 250
    WRITE_C8_D8, 0x06, 0x00,
    WRITE_C8_D8, 0x07, 0x36,

    // level 252
    WRITE_C8_D8, 0x04, 0x00,
    WRITE_C8_D8, 0x05, 0x1c,

    // level 254
    WRITE_C8_D8, 0x02, 0x00,
    WRITE_C8_D8, 0x03, 0x09,

    WRITE_C8_BYTES, 0xff, 3, 0x20, 0x10, 0x00,

    // negative gamma
    WRITE_C8_BYTES, 0xff, 3, 0x20, 0x10, 0x32,

    // level 0
    WRITE_C8_D8, 0x38, 0x03,
    WRITE_C8_D8, 0x39, 0xf0,

    // level 1
    WRITE_C8_D8, 0x36, 0x03,
    WRITE_C8_D8, 0x37, 0xe8,

    // level 3
    WRITE_C8_D8, 0x34, 0x03,
    // 0x35, 0xda,
    WRITE_C8_D8, 0x35, 0xCF,

    // level 5
    WRITE_C8_D8, 0x32, 0x03,
    // 0x33, 0xcf,
    WRITE_C8_D8, 0x33, 0xBA,

    // level 7
    WRITE_C8_D8, 0x30, 0x03,
    // 0x31, 0xc8,
    WRITE_C8_D8, 0x31, 0xA2,

    // level 9
    WRITE_C8_D8, 0x2e, 0x03,
    // 0x2f, 0xba,
    WRITE_C8_D8, 0x2f, 0x8E,

    // level 11
    WRITE_C8_D8, 0x2c, 0x03,
    // 0x2d, 0xac,
    WRITE_C8_D8, 0x2d, 0x70,

    // level 13
    WRITE_C8_D8, 0x2a, 0x03,
    // 0x2b, 0xa0,
    WRITE_C8_D8, 0x2b, 0x52,

    // level 15
    WRITE_C8_D8, 0x28, 0x03,
    // 0x29, 0x70,
    WRITE_C8_D8, 0x29, 0x3E,

    // level 24
    WRITE_C8_D8, 0x26, 0x02,
    WRITE_C8_D8, 0x27, 0xfa,

    // level 32
    WRITE_C8_D8, 0x24, 0x02,
    WRITE_C8_D8, 0x25, 0xc2,

    // level 48
    WRITE_C8_D8, 0x22, 0x02,
    WRITE_C8_D8, 0x23, 0x80,

    // level 64
    WRITE_C8_D8, 0x20, 0x02,
    WRITE_C8_D8, 0x21, 0x53,

    // level 96
    WRITE_C8_D8, 0x1e, 0x02,
    WRITE_C8_D8, 0x1f, 0x0e,

    // level 128
    WRITE_C8_D8, 0x1c, 0x01,
    WRITE_C8_D8, 0x1d, 0xcf,

    // level 160
    WRITE_C8_D8, 0x1a, 0x01,
    WRITE_C8_D8, 0x1b, 0x7b,

    // level 192
    WRITE_C8_D8, 0x18, 0x01,
    WRITE_C8_D8, 0x19, 0x3d,

    // level 208
    WRITE_C8_D8, 0x16, 0x01,
    WRITE_C8_D8, 0x17, 0x0e,

    // level 224
    WRITE_C8_D8, 0x14, 0x00,
    WRITE_C8_D8, 0x15, 0xd0,

    // level 232
    WRITE_C8_D8, 0x12, 0x00,
    WRITE_C8_D8, 0x13, 0xa6,

    // level 240
    WRITE_C8_D8, 0x10, 0x00,
    WRITE_C8_D8, 0x11, 0x79,

    // level 242
    WRITE_C8_D8, 0x0e, 0x00,
    WRITE_C8_D8, 0x0f, 0x72,

    // level 244
    WRITE_C8_D8, 0x0c, 0x00,
    WRITE_C8_D8, 0x0d, 0x62,

    // level 246
    WRITE_C8_D8, 0x0a, 0x00,
    WRITE_C8_D8, 0x0b, 0x54,

    // level 248
    WRITE_C8_D8, 0x08, 0x00,
    WRITE_C8_D8, 0x09, 0x3d,

    // level 250
    WRITE_C8_D8, 0x06, 0x00,
    WRITE_C8_D8, 0x07, 0x36,

    // level 252
    WRITE_C8_D8, 0x04, 0x00,
    WRITE_C8_D8, 0x05, 0x1c,

    // level 254
    WRITE_C8_D8, 0x02, 0x00,
    WRITE_C8_D8, 0x03, 0x09,

    WRITE_C8_BYTES, 0xff, 3, 0x20, 0x10, 0x00,
    //==============================

    // display 60Hz
    WRITE_C8_BYTES, 0xFF, 3, 0x20, 0x10, 0x11,
    WRITE_C8_D8, 0x60, 0x01,
    WRITE_C8_D8, 0x65, 0x03,
    WRITE_C8_D8, 0x66, 0x38,
    WRITE_C8_D8, 0x67, 0x04,
    WRITE_C8_D8, 0x68, 0x34,
    WRITE_C8_D8, 0x69, 0x03,
    WRITE_C8_D8, 0x61, 0x03,
    WRITE_C8_D8, 0x62, 0x38,
    WRITE_C8_D8, 0x63, 0x04,
    WRITE_C8_D8, 0x64, 0x34,
    WRITE_C8_D8, 0x0A, 0x11,
    WRITE_C8_D8, 0x0B, 0x14,
    WRITE_C8_D8, 0x0c, 0x14,
    WRITE_C8_D8, 0x55, 0x06,

    WRITE_C8_BYTES, 0xFF, 3, 0x20, 0x10, 0x42,
    WRITE_C8_D8, 0x05, 0x3D,
    WRITE_C8_D8, 0x06, 0x03,

    WRITE_C8_BYTES, 0xFF, 3, 0x20, 0x10, 0x00,

    // ver 0.2
    // GVDDN setting
    WRITE_C8_BYTES, 0xFF, 3, 0x20, 0x10, 0x12,
    WRITE_C8_D8, 0x1F, 0xDC,

    // LPM
    WRITE_C8_BYTES, 0xff, 3, 0x20, 0x10, 0x17,
    WRITE_C8_D8, 0x11, 0xAA,
    WRITE_C8_D8, 0x16, 0x12,
    WRITE_C8_D8, 0x0B, 0xC3,
    WRITE_C8_D8, 0x10, 0x0E,
    WRITE_C8_D8, 0x14, 0xAA,
    WRITE_C8_D8, 0x18, 0xA0,
    WRITE_C8_D8, 0x1A, 0x80,
    WRITE_C8_D8, 0x1F, 0x80,

    WRITE_C8_BYTES, 0xff, 3, 0x20, 0x10, 0x11,
    WRITE_C8_D8, 0x30, 0xEE,

    WRITE_C8_BYTES, 0xff, 3, 0x20, 0x10, 0x12,
    WRITE_C8_D8, 0x15, 0x0F,

    // Internal SRAM timing
    WRITE_C8_BYTES, 0xff, 3, 0x20, 0x10, 0x2D,
    WRITE_C8_D8, 0x01, 0x3E,

    // MIPI settling timing
    WRITE_C8_BYTES, 0xff, 3, 0x20, 0x10, 0x40,
    WRITE_C8_D8, 0x83, 0xC4,

    // VGLO= -11, VGLRATIO changed from 4x to 5x
    WRITE_C8_BYTES, 0xFF, 3, 0x20, 0x10, 0x12,
    WRITE_C8_D8, 0x2B, 0x1e,
    WRITE_C8_D8, 0x2C, 0x26,
    WRITE_C8_D8, 0x2E, 0x1e,

    // Enable all ESDDET_SET[3:0]
    WRITE_C8_BYTES, 0xFF, 3, 0x20, 0x10, 0x12,
    WRITE_C8_D8, 0x10, 0x0F,

    // Tune source EQ
    WRITE_C8_BYTES, 0xFF, 3, 0x20, 0x10, 0x18,
    WRITE_C8_D8, 0x01, 0x01,
    WRITE_C8_D8, 0x00, 0x1E,

    // Disable load OTP after sleep out
    WRITE_C8_BYTES, 0xFF, 3, 0x20, 0x10, 0x43,
    WRITE_C8_D8, 0x03, 0x04,

    //==============================
    //--	TIC Setting
    //==============================
    //--	GPIO_C [7:0]
    //--	page 0x50, cmd 0x05, data 0x00  (data bit4=0 for I2C, bit4=1 for SPI)
    WRITE_C8_BYTES, 0xFF, 3, 0x20, 0x10, 0x50,
    WRITE_C8_D8, 0x05, 0x00,

    WRITE_C8_BYTES, 0xFF, 3, 0x20, 0x10, 0x00,

    //--	DIC_I2C_SA [7:0]
    //--	page 0x50, cmd 0x00, data 0x00    for I2CS_DA[15: 8]
    //--	page 0x50, cmd 0x01, data 0x00    for I2CS_DA[ 7: 0]
    WRITE_C8_BYTES, 0xFF, 3, 0x20, 0x10, 0x50,
    WRITE_C8_D8, 0x00, 0xA6,
    WRITE_C8_D8, 0x01, 0xA6,

    WRITE_C8_BYTES, 0xFF, 3, 0x20, 0x10, 0x00,

    //--	TIC_SPI_IOMUX [7:0]
    //--	page 0x50, cmd 0x08, data 0x00    [7:6] MISO, [5:4]MOSI, [3:2]SCL, [1:0] CSX
    WRITE_C8_BYTES, 0xFF, 3, 0x20, 0x10, 0x50,
    WRITE_C8_D8, 0x08, 0x55,

    WRITE_C8_BYTES, 0xFF, 3, 0x20, 0x10, 0x00,
    // ver 0.2 end

    // Case 1, 3H
    WRITE_C8_BYTES, 0xFF, 3, 0x20, 0x10, 0x10,
    WRITE_C8_D8, 0x0B, 0x43,
    WRITE_C8_D8, 0x0C, 0x12,
    WRITE_C8_D8, 0x10, 0x01,
    WRITE_C8_D8, 0x11, 0x12,
    WRITE_C8_D8, 0x15, 0x00,
    WRITE_C8_D8, 0x16, 0x00,
    WRITE_C8_D8, 0x1A, 0x00,
    WRITE_C8_D8, 0x1B, 0x00,
    WRITE_C8_D8, 0x61, 0x00,
    WRITE_C8_D8, 0x62, 0x00,
    WRITE_C8_D8, 0x51, 0x11,
    WRITE_C8_D8, 0x55, 0x55,
    WRITE_C8_D8, 0x58, 0x00,
    WRITE_C8_D8, 0x5C, 0x00,

    WRITE_C8_BYTES, 0xFF, 3, 0x20, 0x10, 0x10,
    WRITE_C8_D8, 0x20, 0x81,
    WRITE_C8_D8, 0x21, 0x82,
    WRITE_C8_D8, 0x22, 0x72,
    WRITE_C8_D8, 0x30, 0x00,
    WRITE_C8_D8, 0x31, 0x00,
    WRITE_C8_D8, 0x32, 0x00,

    WRITE_C8_BYTES, 0xFF, 3, 0x20, 0x10, 0x10,
    WRITE_C8_D8, 0x44, 0x44,
    WRITE_C8_D8, 0x45, 0x55,
    WRITE_C8_D8, 0x46, 0x66,
    WRITE_C8_D8, 0x47, 0x77,
    WRITE_C8_D8, 0x49, 0x00,
    WRITE_C8_D8, 0x4A, 0x00,
    WRITE_C8_D8, 0x4B, 0x00,

    WRITE_C8_BYTES, 0xFF, 3, 0x20, 0x10, 0x17,
    WRITE_C8_D8, 0x37, 0x00,

    WRITE_C8_BYTES, 0xFF, 3, 0x20, 0x10, 0x15,
    WRITE_C8_D8, 0x04, 0x08,
    WRITE_C8_D8, 0x05, 0x04,
    WRITE_C8_D8, 0x06, 0x1C,
    WRITE_C8_D8, 0x07, 0x1A,
    WRITE_C8_D8, 0x08, 0x18,
    WRITE_C8_D8, 0x09, 0x16,

    WRITE_C8_D8, 0x24, 0x05,
    WRITE_C8_D8, 0x25, 0x09,
    WRITE_C8_D8, 0x26, 0x17,
    WRITE_C8_D8, 0x27, 0x19,
    WRITE_C8_D8, 0x28, 0x1B,
    WRITE_C8_D8, 0x29, 0x1D,

    WRITE_C8_BYTES, 0xFF, 3, 0x20, 0x10, 0x16,
    WRITE_C8_D8, 0x04, 0x09,
    WRITE_C8_D8, 0x05, 0x05,
    WRITE_C8_D8, 0x06, 0x1D,
    WRITE_C8_D8, 0x07, 0x1B,
    WRITE_C8_D8, 0x08, 0x19,
    WRITE_C8_D8, 0x09, 0x17,

    WRITE_C8_D8, 0x24, 0x04,
    WRITE_C8_D8, 0x25, 0x08,
    WRITE_C8_D8, 0x26, 0x16,
    WRITE_C8_D8, 0x27, 0x18,
    WRITE_C8_D8, 0x28, 0x1A,
    WRITE_C8_D8, 0x29, 0x1C,

    WRITE_C8_BYTES, 0xFF, 3, 0x20, 0x10, 0x18,
    WRITE_C8_D8, 0x1F, 0x00,
    // case 1, 3H code end

    WRITE_C8_BYTES, 0xFF, 3, 0x20, 0x10, 0x18,
    WRITE_C8_D8, 0x3A, 0x01,

    // Idle mode and Skip mode CP clk setting
    WRITE_C8_BYTES, 0xFF, 3, 0x20, 0x10, 0x11,

    // Idle mode
    WRITE_C8_D8, 0x15, 0x99,
    WRITE_C8_D8, 0x16, 0x99,
    WRITE_C8_D8, 0x1C, 0x88,
    WRITE_C8_D8, 0x1D, 0x88,
    WRITE_C8_D8, 0x1E, 0x88,

    // skip
    WRITE_C8_D8, 0x13, 0xf0,
    WRITE_C8_D8, 0x14, 0x34,

    WRITE_C8_BYTES, 0xFF, 3, 0x20, 0x10, 0x12,

    // OSC
    //  0x12, 0x8b,
    //  v0.3a
    WRITE_C8_D8, 0x06, 0x06,
    WRITE_C8_D8, 0x12, 0x89,

    // ####
    WRITE_C8_BYTES, 0xFF, 3, 0x20, 0x10, 0x11,
    WRITE_C8_D8, 0x0A, 0x00,
    WRITE_C8_D8, 0x0B, 0xf2,
    WRITE_C8_D8, 0x0c, 0xf2,

    WRITE_C8_BYTES, 0xFF, 3, 0x20, 0x10, 0x00,

    WRITE_C8_BYTES, 0xFF, 3, 0x20, 0x10, 0x11,
    WRITE_C8_D8, 0x08, 0x70,
    WRITE_C8_D8, 0x09, 0x00,

    WRITE_C8_BYTES, 0xFF, 3, 0x20, 0x10, 0x00,
    WRITE_C8_D8, 0x35, 0x00,
    WRITE_C8_D8, 0x3A, 0x05,
    //==============================
    //=End of SPD2010 Initial Code
    //==============================

    // panel #21 VCOM
    //  may need to be tuned for different panel
    WRITE_C8_BYTES, 0xFF, 3, 0x20, 0x10, 0x12,
    WRITE_C8_D8, 0x21, 0xC8,

    WRITE_C8_BYTES, 0xFF, 3, 0x20, 0x10, 0x00,

    WRITE_COMMAND_8, WEA2012_SLPOUT,
    WRITE_COMMAND_8, WEA2012_DISPON,

    // WRITE_COMMAND_8, 0x35, //该命令打开TE信号线的撕裂效果输出信号。
    END_WRITE,

    DELAY, WEA2012_SLPOUT_DELAY};

class Arduino_WEA2012 : public Arduino_TFT
{
public:
  Arduino_WEA2012(Arduino_DataBus *bus, int8_t rst = GFX_NOT_DEFINED);

  bool begin(int32_t speed = GFX_NOT_DEFINED) override;

  void setRotation(uint8_t r) override;

  void writeAddrWindow(int16_t x, int16_t y, uint16_t w, uint16_t h);

  void invertDisplay(bool) override;
  void displayOn() override;
  void displayOff() override;

protected:
  void tftInit() override;

private:
};
